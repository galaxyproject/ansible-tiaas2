- name: Create group
  user:
    name: "{{ tiaas_group }}"
    state: present
  when: tiaas_create_group

- name: Create user account
  user:
    name: "{{ tiaas_user }}"
    comment: Training Infrastructure as a Service User
    group: "{{ tiaas_group }}"
    home: "{{ tiaas_dir }}"
  when: tiaas_create_user

- name: Ensure directory is available
  file:
    path: "{{ tiaas_dir }}"
    state: directory
    owner: "{{ tiaas_user }}"
    group: "{{ tiaas_group }}"
    mode: 0755

- name: Clone repository
  become: true
  become_user: "{{ tiaas_user }}"
  git:
    repo: "{{ tiaas_repo }}"
    dest: "{{ tiaas_code_dir }}/"
    version: "{{ tiaas_version }}"
    force: "{{ tiaas_force_checkout }}"
  register: __tiaas_git_update_result
  notify: 'reload tiaas'

- name: Send gunicorn conf
  template:
    src: "gunicorn.py"
    dest: "{{ tiaas_dir }}/gunicorn.py"
    owner: "{{ tiaas_user }}"
    group: "{{ tiaas_group }}"
    mode: 0640
  notify: 'reload tiaas'

- name: Install base dependencies
  become: true
  become_user: "{{ tiaas_user }}"
  pip:
    requirements: "{{ tiaas_code_dir }}/requirements.txt"
    extra_args: "--index-url https://wheels.galaxyproject.org/simple/ --extra-index-url https://pypi.python.org/simple {{ pip_extra_args | default('') }}"
    virtualenv: "{{ tiaas_venv_dir }}"
    virtualenv_command: "{{ tiaas_virtualenv_command | default(galaxy_virtualenv_command | default(pip_virtualenv_command | default(omit))) }}"
  environment:
    PYTHONPATH: null
    VIRTUAL_ENV: "{{ tiaas_venv_dir }}"
  notify: 'reload tiaas'

- name: Ensure config directory is available
  file:
    path: "{{ tiaas_config_dir }}/"
    state: directory
    owner: "{{ tiaas_user }}"
    group: "{{ tiaas_group }}"
    mode: 0750

- name: Send config
  template:
    src: "config.py"
    dest: "{{ tiaas_config_dir }}/local_settings.py"
    owner: "{{ tiaas_user }}"
    group: "{{ tiaas_group }}"
    mode: 0640
  notify: 'reload tiaas'

- name: Create style directory
  file:
    path: "{{ tiaas_code_dir }}/training/static/training/style"
    state: directory
    owner: "{{ tiaas_user }}"
    group: "{{ tiaas_group }}"
    mode: 0755

- name: Copy Galaxy's stylesheet
  copy:
    src: "{{ tiaas_galaxy_stylesheet }}"
    dest: "{{ tiaas_code_dir }}/training/static/training/style/galaxy.css"
    mode: 0644
    remote_src: true

- name: Install systemd unit file
  template:
    src: tiaas.service
    dest: /etc/systemd/system/tiaas.service
    mode: 0644
  notify: setup tiaas systemd

- name: Install socket
  template:
    src: tiaas.socket
    dest: /etc/systemd/system/tiaas.socket
    mode: 0644
  notify: enable tiaas socket

# Run syncdb on the application
- name: Update database
  become: true
  become_user: "{{ tiaas_user }}"
  django_manage:  # noqa no-handler
    command: migrate
    app_path: "{{ tiaas_code_dir }}/"
    pythonpath: "{{ tiaas_dir }}"
    virtualenv: "{{ tiaas_venv_dir }}"
  run_once: "{{ not tiaas_tiaas_use_sqlite }}"
  when: __tiaas_git_update_result is changed

# Create an initial superuser.
- name: Create superuser if needed
  become: true
  become_user: "{{ tiaas_user }}"
  django_manage:
    command: >-
        shell -c
        "from django.contrib.auth.models import User; User.objects.create_superuser('{{ tiaas_admin_user }}', 'admin@localhost', '{{ tiaas_admin_pass }}') if User.objects.filter(username='{{ tiaas_admin_user }}').count() == 0 else None"
    app_path: "{{ tiaas_code_dir }}/"
    pythonpath: "{{ tiaas_dir }}"
    virtualenv: "{{ tiaas_venv_dir }}"
  run_once: "{{ not tiaas_tiaas_use_sqlite }}"
  ignore_errors: true

- name: Ensure static directory is available
  file:
    path: "{{ tiaas_static_dir }}/"
    state: directory
    owner: "{{ tiaas_user }}"
    group: "{{ tiaas_group }}"
    mode: 0755

- name: Collect static files
  become: true
  become_user: "{{ tiaas_user }}"
  django_manage:
    command: collectstatic
    app_path: "{{ tiaas_code_dir }}/"
    pythonpath: "{{ tiaas_dir }}"
    virtualenv: "{{ tiaas_venv_dir }}"

- name: Copy custom HTML templates
  become: true
  become_user: "{{ tiaas_user }}"
  copy:
    src: "{{ tiaas_templates_dir }}/{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  loop: "{{ tiaas_html_templates }}"
  when: tiaas_templates_dir is defined
  notify: 'reload tiaas'

- name: Copy custom static files
  become: true
  become_user: "{{ tiaas_user }}"
  copy:
    src: "{{ tiaas_extra_static_dir }}/"
    dest: "{{ tiaas_static_dir }}"
    mode: 0644
  when: tiaas_extra_static_dir is defined

- name: Copy default HTML templates
  become: true
  become_user: "{{ tiaas_user }}"
  copy:
    src: "html/{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  loop: "{{ tiaas_html_templates }}"
  when: tiaas_templates_dir is not defined
  notify: 'reload tiaas'

- name: Copy default static files
  become: true
  become_user: "{{ tiaas_user }}"
  copy:
    src: static/
    dest: "{{ tiaas_static_dir }}"
    mode: 0644
  when: tiaas_extra_static_dir is not defined

- name: Schedule cron job to disassociate training groups from roles after training expires
  cron:
    user: "{{ tiaas_user }}"
    cron_file: ansible_tiaas2_disassociate_training_roles
    name: tiaas_disassociate_training_roles
    state: "{{ (tiaas_disassociate_training_roles is truthy) | ternary('present', 'absent') }}"
    hour: "{{ tiaas_disassociate_training_roles.hour | default(0) }}"
    minute: "{{ tiaas_disassociate_training_roles.minute | default(0) }}"
    job: "{ date; {{ tiaas_venv_dir }}/bin/python {{ tiaas_code_dir }}/manage.py disassociate_training_roles --pythonpath {{ tiaas_dir }}; } >> {{ tiaas_dir }}/disassociate_training_roles.log"
